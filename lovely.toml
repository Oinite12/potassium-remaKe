[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# function G.FUNCS.evaluate_play
# Tag calculations pre-scoring
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''mult, hand_chips = mod_mult(mult), mod_chips(hand_chips)'''
position = "after"
payload = '''check_and_set_high_score('best_glop', glop)
for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'scoring'})
end'''
match_indent = true

# function update_hand_text
# Floating point resolution (visual)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if delta < 0 then delta = ''..delta; col = G.C.RED'''
position = "before"
payload = '''
delta = tonumber(('%.3f'):format(delta))
'''
match_indent = true

# function SMODS.calculate_effect
# Increase Glop per chip/mult/glop/etc increase
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
if effect[key] then
'''
position = "after"
payload = '''
if Potassium.calc_keys.all[key] then
    SMODS.Scoring_Parameters.kali_glop:modify(0.01)
end
'''
match_indent = true

# -- CARD GLOP --

# function Card:set_ability
# Set defaults for permanent card bonuses (Card perma_glop
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "perma_bonus = self.ability and self.ability.perma_bonus or 0,"
position = "after"
payload = '''
perma_glop = self.ability and self.ability.perma_glop or 0,
'''
match_indent = true

# function Card:generate_UIBox_ability_table
# Prime specific_vars for playing cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "bonus_chips = bonus_chips ~= 0 and bonus_chips or nil,"
position = "after"
payload = '''
bonus_glop = self.ability.perma_glop ~= 0 and (self.ability.perma_glop) or nil,'''
match_indent = true


# function eval_card
# Make card perma glop score
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '-- TARGET: main scoring on played cards'
position = "after"
match_indent = true
payload = '''
local glop = card:get_glop()
if glop > 0 then
    ret.playing_card.glop = glop
end
'''